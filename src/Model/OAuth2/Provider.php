<?php

namespace BimTheBam\OAuth2Authenticator\Model\OAuth2;

use SilverStripe\Forms\FieldList;
use SilverStripe\ORM\DataObject;
use SilverStripe\ORM\FieldType\DBBoolean;
use SilverStripe\ORM\FieldType\DBVarchar;

/**
 * Class Provider
 * @package BimTheBam\OAuth2Authenticator\Model\OAuth2
 * @property bool Active
 * @property string Title
 * @property string AuthorizationEndpoint
 * @property string TokenEndpoint
 */
class Provider extends DataObject
{
    /**
     * @var string[]
     */
    private static $db = [
        'Active' => DBBoolean::class,
        'Title' => DBVarchar::class . '(50)',
        'AuthorizationEndpoint' => DBVarchar::class . '(255)',
        'TokenEndpoint' => DBVarchar::class . '(255)',
    ];

    /**
     * @var string[]
     */
    private static $summary_fields = [
        'Active.Nice',
        'Title',
    ];

    /**
     * @return FieldList
     */
    public function getCMSFields()
    {
        $this->beforeUpdateCMSFields(function (FieldList $fields) {
            if ($authorizationEndpoint = $fields->dataFieldByName('AuthorizationEndpoint')) {
                $authorizationEndpoint->setAttribute(
                    'placeholder',
                    _t(__CLASS__ . '.AUTHORIZATION_ENDPOINT_PLACEHOLDER', 'https://example.com/oauth2/authorize')
                );
            }

            if ($tokenEndpoint = $fields->dataFieldByName('TokenEndpoint')) {
                $tokenEndpoint->setAttribute(
                    'placeholder',
                    _t(__CLASS__ . '.TOKEN_ENDPOINT_PLACEHOLDER', 'https://example.com/oauth2/access_token')
                );
            }
        });
        return parent::getCMSFields(); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool $includerelations
     * @return array
     */
    public function fieldLabels($includerelations = true)
    {
        $labels = parent::fieldLabels($includerelations);
        $labels['Active'] = $labels['Active.Nice'] = _t(__CLASS__ . '.ACTIVE', 'Active');
        $labels['Title'] = _t(__CLASS__ . '.TITLE', 'Title');
        $labels['AuthorizationEndpoint'] = _t(__CLASS__ . '.AUTHORIZATION_ENDPOINT', 'Authorization endpoint');
        $labels['TokenEndpoint'] = _t(__CLASS__ . '.TOKEN_ENDPOINT', 'Token endpoint');
        return $labels;
    }

    /**
     * @return \SilverStripe\ORM\ValidationResult
     */
    public function validate()
    {
        $result = parent::validate();

        foreach (['Title', 'AuthorizationEndpoint', 'TokenEndpoint'] as $field) {
            if (empty($this->{$field})) {
                $result->addFieldError(
                    $field,
                    _t(__CLASS__ . '.ERROR_EMPTY_FIELD', 'This field is required')
                );
            }
        }

        if ($result->isValid()) {
            $filterOptions = [
                FILTER_FLAG_SCHEME_REQUIRED,
                FILTER_FLAG_HOST_REQUIRED,
                FILTER_FLAG_PATH_REQUIRED,
            ];

            foreach (['AuthorizationEndpoint', 'TokenEndpoint'] as $field) {
                if (!filter_var($this->{$field}, FILTER_VALIDATE_URL, $filterOptions)) {
                    $result->addFieldError(
                        $field,
                        _t(__CLASS__ . '.ERROR_INVALID_URL', 'Invalid URL')
                    );
                }
            }
        }

        return $result;
    }
}
